{
	"info": {
		"_postman_id": "f3c81b3b-1999-4efe-9154-b7ce5b58f30f",
		"name": "SPAMD-UL End-to-end tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accountId\", jsonData.accountId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add access pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.accessPassCode\", jsonData.accessPassCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"1 semester\",\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"accessPasses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user's bills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData.length > 0) {",
									"  postman.setEnvironmentVariable(\"param.billId\", jsonData[0].billId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/bills",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"bills"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pay user's bill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{param.accountId}}",
								"bills",
								"{{param.billId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"param.initiativeCode\", jsonData.initiativeCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": {{request.initiative.amount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/initiatives",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"initiatives"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Add user",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Birth date",
									"item": [
										{
											"name": "Invalid birth date (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": null,\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"12-31-2000\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid birth date (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid birth date\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid birth date\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": \"01-01-2300\",\n  \"sex\": {{request.user.sex}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Sex",
									"item": [
										{
											"name": "Invalid sex (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid sex (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid sex\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid sex\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": \"b\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns account id\", function () {",
													"    pm.response.to.have.jsonBody(\"accountId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.user.name}},\n  \"birthDate\": {{request.user.birthDate}},\n  \"sex\": {{request.user.sex}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get user",
							"item": [
								{
									"name": "Non existent account id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Returns account not found\", function () {",
													"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.user.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name);",
													"});",
													"",
													"pm.test(\"Returns correct birth date\", function () {",
													"    var birthDate = postman.getEnvironmentVariable(\"request.user.birthDate\");",
													"    pm.expect(birthDate).to.contain(pm.response.json().birthDate);",
													"});",
													"",
													"pm.test(\"Returns correct sex\", function () {",
													"    var sex = postman.getEnvironmentVariable(\"request.user.sex\");",
													"    pm.expect(sex).to.contain(pm.response.json().sex);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get user's bills",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/bills",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"bills"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns bills\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns bill with id\", function () {",
													"    pm.expect(pm.response.json()[0].billId).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with type\", function () {",
													"    pm.expect(pm.response.json()[0].billType).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with description\", function () {",
													"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount due\", function () {",
													"    pm.expect(pm.response.json()[0].amountDue).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount paid\", function () {",
													"    pm.expect(pm.response.json()[0].amountPaid).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with time\", function () {",
													"    pm.expect(pm.response.json()[0].time).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bills",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bills"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pay user's bill",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Bill id",
									"item": [
										{
											"name": "Non existent bill id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns bill not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Bill not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Amount to pay",
									"item": [
										{
											"name": "Invalid amount to pay (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": \"amountToPay\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": -1\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to pay (exceeding)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns amount due exceeded\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Amount due exceeded\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToPay\": 10000000000\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"bills",
														"{{param.billId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns bill with id\", function () {",
													"    pm.expect(pm.response.json().billId).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with type\", function () {",
													"    pm.expect(pm.response.json().billType).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with description\", function () {",
													"    pm.expect(pm.response.json().description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount due\", function () {",
													"    pm.expect(pm.response.json().amountDue).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with amount paid\", function () {",
													"    pm.expect(pm.response.json().amountPaid).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns bill with time\", function () {",
													"    pm.expect(pm.response.json().time).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amountToPay\": {{request.bill.amountToPay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/bills/{{param.billId}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"bills",
												"{{param.billId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get user's cars",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns cars\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns car with license plate\", function () {",
													"    var licensePlate = postman.getEnvironmentVariable(\"request.car.licensePlate\");",
													"    pm.expect(licensePlate).to.contain(pm.response.json()[0].licensePlate);",
													"});",
													"",
													"pm.test(\"Returns car with manufacturer\", function () {",
													"    var manufacturer = postman.getEnvironmentVariable(\"request.car.manufacturer\");",
													"    pm.expect(manufacturer).to.contain(pm.response.json()[0].manufacturer);",
													"});",
													"",
													"pm.test(\"Returns car with model\", function () {",
													"    var model = postman.getEnvironmentVariable(\"request.car.model\");",
													"    pm.expect(model).to.contain(pm.response.json()[0].model);",
													"});",
													"",
													"pm.test(\"Returns car with year\", function () {",
													"    var year = postman.getEnvironmentVariable(\"request.car.year\");",
													"    pm.expect(year).to.contain(pm.response.json()[0].year);",
													"});",
													"",
													"pm.test(\"Returns car with consumption type\", function () {",
													"    var consumptionType = postman.getEnvironmentVariable(\"request.car.consumptionType\");",
													"    pm.expect(consumptionType).to.contain(pm.response.json()[0].consumptionType);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add car to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Already existing license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns already existing car\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Already existing car\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": null,\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid license plate (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid license plate\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid license plate\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": \"badFormat\",\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Manufacturer",
									"item": [
										{
											"name": "Invalid manufacturer (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": null,\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid manufacturer (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid manufacturer\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid manufacturer\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Model",
									"item": [
										{
											"name": "Invalid model (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": null,\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid model (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid model\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid model\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Year",
									"item": [
										{
											"name": "Invalid year (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": null,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid year (future)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid year\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid year\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": 2300,\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consumption type",
									"item": [
										{
											"name": "Invalid consumption type (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid consumption type (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid car consumption type\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid car consumption type\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/cars",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"cars"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid car",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate2}},\n  \"manufacturer\": {{request.car.manufacturer}},\n  \"model\": {{request.car.model}},\n  \"year\": {{request.car.year}},\n  \"consumptionType\": {{request.car.consumptionType}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/cars",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"cars"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add access pass to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Period",
									"item": [
										{
											"name": "Invalid access period (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": null,\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access period (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access period (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"badValue\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unsupported access period (one hour)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"pm.test(\"Returns unsupported access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Unsupported access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1h\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unsupported access period (one day)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 501\", function () {",
															"    pm.response.to.have.status(501);",
															"});",
															"",
															"pm.test(\"Returns unsupported access period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Unsupported access period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Semesters",
									"item": [
										{
											"name": "Wrong amount of semesters (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid semester (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid semester code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid semester code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"badValue\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1d/week/semester vs 0)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1d/week/semester vs 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1 semester vs 0)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1 semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (1 semester vs 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1 semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (2 semesters vs 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"2 semesters\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (2 semesters vs 3)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"2 semesters\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\",\n      \"E21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Wrong amount of semesters (3 semesters vs 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns wrong amount of semesters\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Wrong amount of semesters\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"3 semesters\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": [\n      \"A20\",\n      \"H21\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Access day",
									"item": [
										{
											"name": "Invalid access day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": null,\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid access day (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid day of week\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid day of week\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": \"funday\",\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns car not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Car not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": \"AAA AAA\",\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"parkingArea\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": {{request.car.licensePlate}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										},
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"parkingArea\": \"nonExistent\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"accessPasses"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid access pass (no license plate)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (1d/week/semester)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"1d/week/semester\",\n  \"accessDay\": {{request.accessPass.accessDay}},\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (1 semester)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"1 semester\",\n  \"semesters\": {{request.accessPass.oneSemester}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (2 semesters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"2 semesters\",\n  \"semesters\": {{request.accessPass.twoSemesters}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid access pass (3 semesters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns access pass code\", function () {",
													"    pm.response.to.have.jsonBody(\"accessPassCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"licensePlate\": {{request.car.licensePlate}},\n  \"period\": \"3 semesters\",\n  \"semesters\": {{request.accessPass.threeSemesters}},\n  \"parkingArea\": {{request.accessPass.parkingArea}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/accessPasses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"accessPasses"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add parking sticker to user",
							"item": [
								{
									"name": "Account id",
									"item": [
										{
											"name": "Non existent account id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns account not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Account not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/dcbf4b65-c58e-40c4-b974-90c47bcd421a/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": \"Zone_Unknown\",\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": null,\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Reception method",
									"item": [
										{
											"name": "Invalid reception method (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": null,\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid reception method (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid reception method\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid reception method\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"byFoot\",\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Postal code",
									"item": [
										{
											"name": "Missing postal code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": null,\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing postal code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : postalCode\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid postal code (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid postal code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid postal code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": \"badFormat\",\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Email",
									"item": [
										{
											"name": "Missing email (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": null,\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing email (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns missing property for email\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Missing property : email\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid email (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid email address\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid email address\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": \"badFormat\",\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Parking period",
									"item": [
										{
											"name": "Missing parking period (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing parking period (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Missing parking period (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking period\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking period\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"users",
														"{{param.accountId}}",
														"parkingStickers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid parking sticker (postal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.postal}},\n  \"postalCode\": {{request.parkingSticker.postalCode}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking sticker (email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": {{request.parkingSticker.receptionMethod.email}},\n  \"email\": {{request.parkingSticker.email}},\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking sticker (ssp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns parking sticker code\", function () {",
													"    pm.response.to.have.jsonBody(\"parkingStickerCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"parkingArea\": {{request.parkingSticker.parkingArea}},\n  \"receptionMethod\": \"ssp\",\n  \"parkingPeriod\": {{request.parkingSticker.parkingPeriod}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/users/{{param.accountId}}/parkingStickers",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"users",
												"{{param.accountId}}",
												"parkingStickers"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Parking areas",
					"item": [
						{
							"name": "Get parking areas",
							"item": [
								{
									"name": "Get parking areas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns parking areas\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns parking area with parking area code\", function () {",
													"    pm.expect(pm.response.json()[0].parkingArea).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns parking area with period prices\", function () {",
													"    pm.expect(pm.response.json()[0].parkingPeriodPrice.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns parking area with period price with period\", function () {",
													"    pm.expect(pm.response.json()[0].parkingPeriodPrice[0].period).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns parking area with period price with price\", function () {",
													"    pm.expect(pm.response.json()[0].parkingPeriodPrice[0].price).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/parkingAreas",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"parkingAreas"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Gates",
					"item": [
						{
							"name": "Validate gate entry with access pass",
							"item": [
								{
									"name": "Access pass code",
									"item": [
										{
											"name": "Non existent access pass code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/94bdc917-b04d-4314-b071-980a5d78ad9a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"94bdc917-b04d-4314-b071-980a5d78ad9a"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Date time",
									"item": [
										{
											"name": "Invalid date time (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": \"2020-01-01T23:33:33.33333\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithCode",
														"{{param.accessPassCode}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid gate entry",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 202 or 403\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([202, 403]);});",
													"",
													"pm.test(\"Returns an access status\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gates/entry/validateAccessPassWithCode/{{param.accessPassCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gates",
												"entry",
												"validateAccessPassWithCode",
												"{{param.accessPassCode}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Validate gate exit with access pass",
							"item": [
								{
									"name": "Access pass code",
									"item": [
										{
											"name": "Non existent access pass code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/exit/validateAccessPassWithCode/94bdc917-b04d-4314-b071-980a5d78ad9a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"exit",
														"validateAccessPassWithCode",
														"94bdc917-b04d-4314-b071-980a5d78ad9a"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Validate gate entry with license plate",
							"item": [
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent access license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/GPT OK1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"GPT OK1"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Date time",
									"item": [
										{
											"name": "Invalid date time (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"{{param.licensePlate}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"{{param.licensePlate}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid date time (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid date time\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid date time\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": \"2020-01-01T23:33:33.33333\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"{{param.licensePlate}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Valid gate entry",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 202 or 403\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([202, 403]);});",
													"",
													"pm.test(\"Returns an access status\", function () {",
													"    pm.expect(pm.response.json().accessStatus).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/{{param.licensePlate}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"gates",
												"entry",
												"validateAccessPassWithLicensePlate",
												"{{param.licensePlate}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Validate gate exit with license plate",
							"item": [
								{
									"name": "License plate",
									"item": [
										{
											"name": "Non existent access license plate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns access pass not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Access pass not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"dateTime\": {{request.gates.dateTime}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/gates/entry/validateAccessPassWithLicensePlate/GPT OK1",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"gates",
														"entry",
														"validateAccessPassWithLicensePlate",
														"GPT OK1"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Offenses",
					"item": [
						{
							"name": "Get offense types",
							"item": [
								{
									"name": "Get offense types",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns offenses\", function () {",
													"    pm.expect(pm.response.json().length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns offense with description\", function () {",
													"    pm.expect(pm.response.json()[0].description).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offense with code\", function () {",
													"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns offense with amount\", function () {",
													"    pm.expect(pm.response.json()[0].amount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/types",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"types"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Validation offense for parking sticker",
							"item": [
								{
									"name": "Parking sticker code",
									"item": [
										{
											"name": "Invalid parking sticker code (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": null,\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking sticker code (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking sticker code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking sticker code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Parking area",
									"item": [
										{
											"name": "Non existent parking area",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns parking area not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Parking area not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {\n        \"parkingArea\": {{request.offenseValidation.parkingArea}}\n    },\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": null,\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid parking area (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid parking area code\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid parking area code\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Time of day",
									"item": [
										{
											"name": "Invalid time of day (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid time of day (bad format)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid time of day\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid time of day\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": \"120000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/offenses/validate",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"offenses",
														"validate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid offense validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"parkingStickerCode\": \"{{param.parkingStickerCode}}\",\n    \"parkingArea\": {{request.offenseValidation.parkingArea}},\n    \"timeOfDay\": {{request.offenseValidation.timeOfDay}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/offenses/validate",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"offenses",
												"validate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Initiatives",
					"item": [
						{
							"name": "Add initiative",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Invalid name (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": null,\n  \"amount\": {{request.initiative.amount}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid name (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid initiative name\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid initiative name\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": {{request.initiative.amount}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Amount",
									"item": [
										{
											"name": "Invalid amount (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": \"amount\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": -200.0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Returns initiative code\", function () {",
													"    pm.response.to.have.jsonBody(\"initiativeCode\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": {{request.initiative.name}},\n  \"amount\": {{request.initiative.amount}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get initiative",
							"item": [
								{
									"name": "Initiative code",
									"item": [
										{
											"name": "Non existent initiative code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns initiative not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Initiative not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}/api/initiatives/nonExistent",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"nonExistent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns correct code\", function () {",
													"    var code = postman.getEnvironmentVariable(\"param.initiativeCode\");",
													"    pm.expect(code).to.contain(pm.response.json().code);",
													"});",
													"",
													"pm.test(\"Returns correct name\", function () {",
													"    var name = postman.getEnvironmentVariable(\"request.initiative.name\");",
													"    pm.expect(name).to.contain(pm.response.json().name);",
													"});",
													"",
													"pm.test(\"Returns correct amount\", function () {",
													"    var amount = postman.getEnvironmentVariable(\"request.initiative.amount\");",
													"    pm.expect(amount).to.contain(pm.response.json().allocatedAmount);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"{{param.initiativeCode}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get initiatives",
							"item": [
								{
									"name": "Get initiatives",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns initiative\", function () {",
													"    pm.expect(pm.response.json()).to.length.to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Returns initiative with correct code\", function () {",
													"    pm.expect(pm.response.json()[0].code).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns initiative with correct name\", function () {",
													"    pm.expect(pm.response.json()[0].name).to.not.be.null;",
													"});",
													"",
													"pm.test(\"Returns initiative with correct allocated amount\", function () {",
													"    var allocatedAmount = postman.getEnvironmentVariable(\"request.initiative.amount\");",
													"    pm.expect(allocatedAmount).to.contain(pm.response.json()[0].allocatedAmount);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add amount to initiative",
							"item": [
								{
									"name": "Initiative code",
									"item": [
										{
											"name": "Non existent initiative code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Returns initiative not found\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Initiative not found\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": {{request.initiative.amountToAdd}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/dcbf4b65-c58e-40c4-b974-90c47bcd421a",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"dcbf4b65-c58e-40c4-b974-90c47bcd421a"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Amount to add",
									"item": [
										{
											"name": "Invalid amount to add (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (string)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": \"amount\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid amount to add (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns negative amount of money\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Negative amount of money\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amountToAdd\": -20.0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"initiatives",
														"{{param.initiativeCode}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid amount to add",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amountToAdd\": {{request.initiative.amountToAdd}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/{{param.initiativeCode}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"{{param.initiativeCode}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get available amount for initiatives",
							"item": [
								{
									"name": "Get available amount for initiatives",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns available amount\", function () {",
													"    pm.expect(pm.response.json().availableAmount).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/initiatives/availableAmount",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"initiatives",
												"availableAmount"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Carbon credits",
					"item": [
						{
							"name": "Enable or disable monthly payment",
							"item": [
								{
									"name": "Monthly payment status",
									"item": [
										{
											"name": "Invalid monthly payment status (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"monthlyPaymentStatus\": null\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid monthly payment status (missing)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid monthly payment status (bad value)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Returns invalid monthly payment status\", function () {",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid monthly payment status\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"monthlyPaymentStatus\": \"badValue\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/carbonCredits",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"carbonCredits"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Enable monthly payment for carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"monthlyPaymentStatus\": \"enable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Disable monthly payment for carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"monthlyPaymentStatus\": \"disable\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get amount of purchased carbon credits",
							"item": [
								{
									"name": "Get amount of purchased carbon credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns carbon credits\", function () {",
													"    pm.expect(pm.response.json().carbonCredits).to.not.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/carbonCredits",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"carbonCredits"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Profits",
							"item": [
								{
									"name": "Get profits report for parking stickers",
									"item": [
										{
											"name": "Year",
											"item": [
												{
													"name": "Invalid year (string)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/reports/profits/parkingStickers?year=invalid",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"reports",
																"profits",
																"parkingStickers"
															],
															"query": [
																{
																	"key": "year",
																	"value": "invalid"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Valid profits report query",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/parkingStickers?year={{queryParam.profits.year}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"parkingStickers"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get profits report for access passes",
									"item": [
										{
											"name": "Year",
											"item": [
												{
													"name": "Invalid year (string)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/reports/profits/accessPasses?year=invalid",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"reports",
																"profits",
																"accessPasses"
															],
															"query": [
																{
																	"key": "year",
																	"value": "invalid"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Valid profits report query",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/accessPasses?year={{queryParam.profits.year}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Valid profits report query by consumption type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns consumption type dimension\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions[0].name).to.equal(\"consumptionType\");",
															"});",
															"",
															"pm.test(\"Returns consumption type dimension with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions[0].value).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/accessPasses?year={{queryParam.profits.year}}&byConsumptionType=true",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"accessPasses"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														},
														{
															"key": "byConsumptionType",
															"value": "true"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get profits report for offenses",
									"item": [
										{
											"name": "Year",
											"item": [
												{
													"name": "Invalid year (string)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Returns status 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{host}}/api/reports/profits/offenses?year=invalid",
															"host": [
																"{{host}}"
															],
															"path": [
																"api",
																"reports",
																"profits",
																"offenses"
															],
															"query": [
																{
																	"key": "year",
																	"value": "invalid"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Valid profits report query",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns periods array\", function () {",
															"    pm.expect(pm.response.json().length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period for given year\", function () {",
															"    var year = postman.getEnvironmentVariable(\"queryParam.profits.year\");",
															"    pm.expect(pm.response.json()[0].period).to.equal(year);",
															"});",
															"",
															"pm.test(\"Returns period data\", function () {",
															"    pm.expect(pm.response.json()[0].data).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns period data has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns dimensions has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns metrics has an array\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Returns profits metric\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"profits\");",
															"});",
															"",
															"pm.test(\"Returns profits metric with value\", function () {",
															"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/profits/offenses?year={{queryParam.profits.year}}",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"profits",
														"offenses"
													],
													"query": [
														{
															"key": "year",
															"value": "{{queryParam.profits.year}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Parking areas",
							"item": [
								{
									"name": "Report type",
									"item": [
										{
											"name": "Invalid report type (bad value) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Returns status 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Returns invalid report type\", function () {\r",
															"    pm.expect(pm.response.json().error).to.equal(\"Invalid report type\")\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/api/reports/parkingAreas?reportType=invalid",
													"host": [
														"{{host}}"
													],
													"path": [
														"api",
														"reports",
														"parkingAreas"
													],
													"query": [
														{
															"key": "reportType",
															"value": "invalid"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Valid parking areas monthly report type query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods array\", function () {\r",
													"    pm.expect(pm.response.json().length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period for current year\", function () {\r",
													"    pm.expect(pm.response.json()[0].period).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data\", function () {\r",
													"    pm.expect(pm.response.json()[0].data).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns dimensions has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].name).to.equal(\"parkingArea\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].value).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns metrics has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/reports/parkingAreas?reportType=monthly",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"reports",
												"parkingAreas"
											],
											"query": [
												{
													"key": "reportType",
													"value": "monthly"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking areas day of month report type query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods array\", function () {\r",
													"    pm.expect(pm.response.json().length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period for given month\", function () {\r",
													"    pm.expect(pm.response.json()[0].period).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data\", function () {\r",
													"    pm.expect(pm.response.json()[0].data).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns period data has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns dimensions has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].name).to.equal(\"parkingArea\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns parking area dimension with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions[0].value).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns metrics has an array\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns gate entries metric with value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/reports/parkingAreas?reportType=dayOfMonth&month={{queryParam.reportMonth}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"reports",
												"parkingAreas"
											],
											"query": [
												{
													"key": "reportType",
													"value": "dayOfMonth"
												},
												{
													"key": "month",
													"value": "{{queryParam.reportMonth}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Valid parking areas summary report type query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Returns status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods array of 3 periods\", function () {\r",
													"    pm.expect(pm.response.json().length).to.equal(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns maximum period\", function () {\r",
													"    pm.expect(pm.response.json()[0].period).to.contain(\"maximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns minimum period\", function () {\r",
													"    pm.expect(pm.response.json()[1].period).to.contain(\"minimum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns average period\", function () {\r",
													"    pm.expect(pm.response.json()[2].period).to.contain(\"average\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with single data\", function () {\r",
													"    pm.expect(pm.response.json()[0].data.length).to.equal(1);\r",
													"    pm.expect(pm.response.json()[1].data.length).to.equal(1);\r",
													"    pm.expect(pm.response.json()[2].data.length).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods without dimension\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].dimensions.length).to.equal(0);\r",
													"    pm.expect(pm.response.json()[1].data[0].dimensions.length).to.equal(0);\r",
													"    pm.expect(pm.response.json()[2].data[0].dimensions.length).to.equal(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with one metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics.length).to.equal(1);\r",
													"    pm.expect(pm.response.json()[1].data[0].metrics.length).to.equal(1);\r",
													"    pm.expect(pm.response.json()[2].data[0].metrics.length).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with gate entrics metric\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"    pm.expect(pm.response.json()[1].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"    pm.expect(pm.response.json()[2].data[0].metrics[0].name).to.equal(\"gateEntries\");\r",
													"});\r",
													"\r",
													"pm.test(\"Returns periods with gate entrics metric value\", function () {\r",
													"    pm.expect(pm.response.json()[0].data[0].metrics[0].value).to.not.be.null;\r",
													"    pm.expect(pm.response.json()[1].data[0].metrics[0].value).to.not.be.null;\r",
													"    pm.expect(pm.response.json()[2].data[0].metrics[0].value).to.not.be.null;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/reports/parkingAreas?reportType=summary&month={{queryParam.reportMonth}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"reports",
												"parkingAreas"
											],
											"query": [
												{
													"key": "reportType",
													"value": "summary"
												},
												{
													"key": "month",
													"value": "{{queryParam.reportMonth}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}